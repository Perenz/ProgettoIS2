swagger: '2.0'
info:
  version: '1.0'
  title: "ProgettoIS2"
  description: It is an API that allows the user to upload images and videos and to do some processing on them.
  license:
    name: MIT
host: blooming-stream-08914.herokuapp.com
basePath: /
tags:
- name: "Images"
- name: "Videos"
- name: "Images Filters"
- name: "Images Formats"
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /images:
    get:
      tags:
        - "Images"
      summary: Return an image
      consumes:
        - application/json
      produces:
        - image/jpeg
        - image/png
      parameters:
        - in: query
          name: id
          required: true
          type: string
      responses:
        200:
          description: Successful Response - The image is returned
          schema:
            type: file
            format: binary
          
          
    post:
      tags:
        - "Images"
      summary: Upload a new image
      consumes:
        - multipart/form-data
      produces: 
        - application/json
      parameters:
        - in: formData
          name: file
          required: true
          type: file
          description: The image to upload, jpg or png.
      responses:
        200:
          description: Successful Response - The ID of the uploaded image is returned
          schema:
            $ref: '#/definitions/ImVidResponse'
                
  /videos:
    get:
      tags:
        - "Videos"
      summary: Return a video
      consumes:
        - application/json
      produces:
        - multipart/form-data
      parameters:
        - in: query
          name: id
          required: true
          type: string
      responses:
        200:
          description: Successful Response - The video is returned
          schema:
            type: string
            format: binary
            
    post:
      tags:
        - "Videos"
      summary: Upload a new video
      consumes:
        - multipart/form-data
      produces: 
        - application/json
      parameters:
        - in: formData
          name: file
          required: true
          type: file
          description: The video to upload
      responses:
        200:
          description: Successful Response - The ID of the uploaded video is returned
          schema:
            $ref: '#/definitions/ImVidResponse'
                
  /image-filters:
    get:
      tags:
        - "Images Filters"
      summary: List the available image filters
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Successful Response - List all the available filters
          schema:
            $ref: '#/definitions/FiltersList'

  /image-filters/grayscale:
    post: 
      tags:
        - "Images Filters"
      summary: Apply the grayscale filter to an Image
      parameters:
        - in: query
          name: source
          type: string
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successful Response - The ID of the new modified image is returned
          schema:
            $ref: '#/definitions/ImVidResponse'
  
  /image-filters/binary:
    post: 
      tags:
        - "Images Filters"
      summary: Apply the binary filter to an image
      parameters:
        - in: query
          name: source
          type: string
          required: true
        - in: query
          name: treshold
          type: integer
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successful Response - The ID of the new modified image is returned
          schema:
            $ref: '#/definitions/ImVidResponse'
 
  /image-filters/invert:
    post: 
      tags:
        - "Images Filters"
      summary: Apply the invert filter to an image
      parameters:
        - in: query
          name: source
          type: string
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successful Response - The ID of the new modified image is returned
          schema:
            $ref: '#/definitions/ImVidResponse' 
            
  /image-formats:
    get:
      tags:
        - "Images Formats"
      summary: List the available image formats
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Successful Response - List all the available formats
          schema:
            $ref: '#/definitions/FormatsList'
            
  /image-formats/png:
    post:
      tags:
        - "Images Formats"
      summary: Convert the image format to PNG
      parameters:
        - in: query
          name: source
          type: string
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Successful Response - The ID of the new modified image is returned
          schema:
            $ref: '#/definitions/ImVidResponse'
            
  /image-formats/jpeg:
    post:
      tags:
        - "Images Formats"
      summary: Convert the image format to JPEG
      parameters:
        - in: query
          name: source
          type: string
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Successful Response - The ID of the new modified image is returned
          schema:
            $ref: '#/definitions/ImVidResponse'

definitions:
  ImVidUpload:
    title: ImVidUpload
    type: object
    properties:
      file:
        type: string
        format: binary

  ImVidResponse:
    title: Response
    type: object
    properties:
      id:
        type: string
        example: 5deb644c1bcc2a33d4e5df36
  FiltersList:
    title: FiltersList
    type: object
    properties:
      available:
        type: array
        items:
          $ref: '#/definitions/Filter'
    example:
      avaliable:
        - name: Grayscale
          parameters: "source:imgID"
          description: Convert an image into greyscale in 8 bits
        - name: Binary
          parameters: "source:imgID treshold:int"
          description: >-
            Every pixel of the image is made either white or black
            It dependes on the treshold value
  Filter:
    title: Filter
    type: object
    properties:
      name:
        type: string
      parameters:
        type: string
      description:
        type: string
    required:
      - name
      - parameters
      - description
      
  FormatsList:
    title: FormatsList
    type: object
    properties:
      avaliable:
        type: array
        items:
          $ref: '#/definitions/Format'
    example:
      avaliable:
        - name: png
          parameters: "source:imgID"
          description: Convert the format of the image to png
        - name: jpeg
          parameters: "source:imgID"
          description: Convert the format of the image to jpeg
  Format:
    title: Format
    type: object
    properties:
      name:
        type: string
      parameters:
        type: string
      description:
        type: string
    required:
      - name
      - parameters
      - description