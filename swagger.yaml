swagger: '2.0'
info:
  version: '1.0'
  title: "ProgettoIS2"
  description: It is an API that allows the user to upload images and videos and to do some processing on them.
  license:
    name: MIT
host: blooming-stream-08914.herokuapp.com
basePath: /
tags:
- name: "Images"
- name: "Videos"
- name: "Images Filters"
schemes:
- http
consumes:
- application/json
produces:
- application/json
paths:
  /images:
    get:
      tags:
        - "Images"
      summary: Return an image
      consumes:
        - application/json
      produces:
        - image/jpeg
        - image/png
      parameters:
        - in: query
          name: id
          required: true
          type: string
      responses:
        200:
          description: Successful response
          schema:
            type: string
            format: binary
          
          
    post:
      tags:
        - "Images"
      summary: Upload a new image
      consumes:
        - image/jpeg
        - image/png
      produces: 
        - application/json
      parameters:
        - in: body
          name: file
          required: true
          schema:
            $ref: '#/definitions/ImVidUpload'
            
      responses:
        201:
          description: Successful Response
          schema:
            $ref: '#/definitions/ImVidResponse'
                
  /videos:
    get:
      tags:
        - "Videos"
      summary: Return a video
      consumes:
        - application/json
      produces:
        - multipart/form-data
      parameters:
        - in: query
          name: id
          required: true
          type: string
      responses:
        200:
          description:  Successfl response
          schema:
            type: string
            format: binary
            
    post:
      tags:
        - "Videos"
      summary: Upload a new video
      consumes:
        - multipart/form-data
      produces: 
        - application/json
      parameters:
        - in: body
          name: files
          required: true
          schema:
            $ref: '#/definitions/ImVidUpload'
      
      responses:
        201:
          description: Successful Response
          schema:
            $ref: '#/definitions/ImVidResponse'
                
  /image-filters:
    get:
      tags:
        - "Images Filters"
      summary: List the available image filters
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        200:
          description: Successful Response
          schema:
            $ref: '#/definitions/FiltersList'
          
            type: object
            properties:
              available:
                type: array
                items:
                  $ref: '#/definitions/Filter'
            example:
              avaliable:
                - name: Grayscale
                  parameters: "source:imgID"
                  description: Convert an image into greyscale in 8 bits
                - name: Binary
                  parameters: "source:imgID treshold:int"
                  description: >-
                    Every pixel of the image is made either white or black
                    It dependes on the treshold value

  /image-filters/grayscale:
    post: 
      tags:
        - "Images Filters"
      summary: Apply the grayscale filter to an Image
      parameters:
        - in: query
          name: source
          type: string
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successful Response
          schema:
            $ref: '#/definitions/ImVidResponse'
  
  /image-filters/binary:
    post: 
      tags:
        - "Images Filters"
      summary: Apply the binary filter to an image
      parameters:
        - in: query
          name: source
          type: string
          required: true
        - in: query
          name: treshold
          type: integer
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successful Response
          schema:
            $ref: '#/definitions/ImVidResponse'
 
  /image-filters/invert:
    post: 
      tags:
        - "Images Filters"
      summary: Apply the invert filter to an image
      parameters:
        - in: query
          name: source
          type: string
          required: true
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        201:
          description: Successful Response
          schema:
            $ref: '#/definitions/ImVidResponse' 
definitions:
  ImVidUpload:
    title: ImVidUpload
    type: object
    properties:
      file:
        type: string
        format: binary

  ImVidResponse:
    title: Response
    type: object
    properties:
      id:
        type: string
        example: 5deb644c1bcc2a33d4e5df36
  FiltersList:
    title: FiltersList
    type: object
    properties:
      available:
        type: array
        items:
          $ref: '#/definitions/Filter'
    example:
      avaliable:
        - name: Grayscale
          parameters: "source:imgID"
          description: Convert an image into greyscale in 8 bits
        - name: Binary
          parameters: "source:imgID treshold:int"
          description: >-
            Every pixel of the image is made either white or black
            It dependes on the treshold value
    
  Filter:
    title: Filter
    type: object
    properties:
      name:
        type: string
      parameters:
        type: string
      description:
        type: string
    required:
      - name
      - parameters
      - description
  QuestionRequest:
    title: Question Request
    type: object
    properties:
      question:
        type: string
      choices:
        type: array
        items:
          type: string
    required:
      - question
      - choices
    example:
      question: Favourite programming language?
      choices:
        - Swift
        - Python
        - Objective-C
        - Ruby